#!/usr/bin/env node

import app from "../dist/app.js";
import debug from "debug";
import http from "http";
import { sequelize } from "../dist/models/index.js";

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Create HTTP server.
const server = http.createServer(app);

// Sync database and then start the server.
(async () => {
  try {
    await sequelize.sync(); // Synchronize models with the database
    console.log("Database synchronized");

    // Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  } catch (error) {
    console.error("Unable to sync database:", error);
    process.exit(1); // Exit if database sync fails
  }
})();

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  const errorMessages = {
    EACCES: `${bind} requires elevated privileges`,
    EADDRINUSE: `${bind} is already in use`
  };

  const message = errorMessages[error.code];

  if (message) {
    console.error(message);
    process.exit(1);
  } else {
    throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
